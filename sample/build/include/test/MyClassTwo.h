// Generated by Haxe 5.0.0-alpha.1+5c05e6d
#ifndef INCLUDED_test_MyClassTwo
#define INCLUDED_test_MyClassTwo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_9a2bf8c8c5106807_18_new)
HX_DECLARE_CLASS1(test,MyClassTwo)

namespace test{


class HXCPP_CLASS_ATTRIBUTES MyClassTwo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MyClassTwo_obj OBJ_;
		MyClassTwo_obj();

	public:
		enum { _hx_ClassId = 0x5f8bdcb2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="test.MyClassTwo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"test.MyClassTwo"); }

		inline static ::hx::ObjectPtr< MyClassTwo_obj > __new() {
			::hx::ObjectPtr< MyClassTwo_obj > __this = new MyClassTwo_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MyClassTwo_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MyClassTwo_obj *__this = (MyClassTwo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MyClassTwo_obj), true, "test.MyClassTwo"));
			*(void **)__this = MyClassTwo_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_9a2bf8c8c5106807_18_new)
HXDLIN(  18)		( ( ::test::MyClassTwo)(__this) )->myField = HX_("Hello World",84,f6,db,6f);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MyClassTwo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MyClassTwo",e0,0b,b9,59); }

		::String myField;
};

} // end namespace test

#endif /* INCLUDED_test_MyClassTwo */ 
