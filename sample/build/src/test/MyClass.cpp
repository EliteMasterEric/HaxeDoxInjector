// Generated by Haxe 5.0.0-alpha.1+5c05e6d
#include <hxcpp.h>

#ifndef INCLUDED_test_MyClass
#include <test/MyClass.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_893655a151f8aae3_10_new,"test.MyClass","new",0xf7a00de2,"test.MyClass.new","test/MyClass.hx",10,0x730e2f0f)
namespace test{

void MyClass_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_893655a151f8aae3_10_new)
HXDLIN(  10)		this->myField = HX_("Hello World",84,f6,db,6f);
            	}

Dynamic MyClass_obj::__CreateEmpty() { return new MyClass_obj; }

void *MyClass_obj::_hx_vtable = 0;

Dynamic MyClass_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MyClass_obj > _hx_result = new MyClass_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MyClass_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58e7d14e;
}


MyClass_obj::MyClass_obj()
{
}

void MyClass_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MyClass);
	HX_MARK_MEMBER_NAME(myField,"myField");
	HX_MARK_END_CLASS();
}

void MyClass_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(myField,"myField");
}

::hx::Val MyClass_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"myField") ) { return ::hx::Val( myField ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MyClass_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"myField") ) { myField=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MyClass_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("myField",ae,3d,93,a9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MyClass_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(MyClass_obj,myField),HX_("myField",ae,3d,93,a9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MyClass_obj_sStaticStorageInfo = 0;
#endif

static ::String MyClass_obj_sMemberFields[] = {
	HX_("myField",ae,3d,93,a9),
	::String(null()) };

::hx::Class MyClass_obj::__mClass;

void MyClass_obj::__register()
{
	MyClass_obj _hx_dummy;
	MyClass_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("test.MyClass",f0,34,0f,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MyClass_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MyClass_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MyClass_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MyClass_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace test
